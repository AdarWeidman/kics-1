package engine

import (
	"path/filepath"
	"runtime"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestComputeSimilarityID_NotEqual(t *testing.T) {
	firstHash, err := computeSimilarityID("test.yaml", "My_Query_ID", "Resources.MyExample")
	require.NoError(t, err)
	secondHash, err := computeSimilarityID("test1.yaml", "My_Query_ID", "Resources.MyExample")
	require.NoError(t, err)
	require.NotEqual(t, firstHash, secondHash)

	firstHash, err = computeSimilarityID("test.yaml", "My_Query_ID", "Resources.MyExample")
	require.NoError(t, err)
	secondHash, err = computeSimilarityID("test.yaml", "My_Other_Query_ID", "Resources.MyExample")
	require.NoError(t, err)
	require.NotEqual(t, firstHash, secondHash)

	firstHash, err = computeSimilarityID("test.yaml", "My_Query_ID", "Resources.MyExample")
	require.NoError(t, err)
	secondHash, err = computeSimilarityID("test.yaml", "My_Query_ID", "Resources.MyOther.SearchKey")
	require.NoError(t, err)
	require.NotEqual(t, firstHash, secondHash)

	firstHash, err = computeSimilarityID("my/filesystem/test.yaml", "My_Query_ID", "Resources.MyExample")
	require.NoError(t, err)
	secondHash, err = computeSimilarityID("my/other/filesystem/test.yaml", "My_Query_ID", "Resources.MyExample")
	require.NoError(t, err)
	require.NotEqual(t, firstHash, secondHash)
}

func TestComputeSimilarityID_NotEmpty(t *testing.T) {
	hash, err := computeSimilarityID("test.yaml", "My_Query_ID", "Resources.MyExample")
	require.NoError(t, err)
	require.NotEmpty(t, hash)
}

func TestComputeSimilarityID_Equal(t *testing.T) {
	filePath := "test.yaml"
	queryID := "My_Query_ID"
	searchKey := "Resources.MyExample"
	firstHash, err := computeSimilarityID(filePath, queryID, searchKey)
	require.NoError(t, err)
	secondHash, err := computeSimilarityID(filePath, queryID, searchKey)
	require.NoError(t, err)

	require.Equal(t, firstHash, secondHash)

	firstHash, err = computeSimilarityID("my/directory/../test.yaml/", queryID, searchKey)
	require.NoError(t, err)
	secondHash, err = computeSimilarityID("my/test.yaml", queryID, searchKey)
	require.NoError(t, err)

	require.Equal(t, firstHash, secondHash)
}

func TestStandarizeFilePath_Equals(t *testing.T) {
	path := filepath.FromSlash("my/filesystem/test.yaml")
	standardPath, err := standarizeFilePath(path)
	require.NoError(t, err)
	require.Equal(t, "my/filesystem/test.yaml", standardPath)

	path = filepath.FromSlash("my//filesystem//test.yaml")
	standardPath, err = standarizeFilePath(path)
	require.NoError(t, err)
	require.Equal(t, "my/filesystem/test.yaml", standardPath)

	path = filepath.FromSlash("my//filesystem//../test.yaml")
	standardPath, err = standarizeFilePath(path)
	require.NoError(t, err)
	require.Equal(t, "my/test.yaml", standardPath)
}

func TestStandarizeFilePath_NotEquals(t *testing.T) {
	path := filepath.FromSlash("my/filesystem/other/test.yaml")
	standardPath, err := standarizeFilePath(path)
	require.NoError(t, err)
	require.NotEqual(t, "my/filesystem/test.yaml", standardPath)
}

func TestStandarizeFilePath_NotEmpty(t *testing.T) {
	path := filepath.FromSlash("my/filesystem/other/test.yaml")
	standardPath, err := standarizeFilePath(path)
	require.NoError(t, err)
	require.NotEmpty(t, standardPath)
}

func TestStandarizeFilePath_AbsoluteError(t *testing.T) {
	var path string
	if runtime.GOOS == "windows" {
		path = filepath.FromSlash("C://my/filesystem/other/test.yaml")
	} else {
		path = filepath.FromSlash("/my/filesystem/other/test.yaml")
	}
	_, err := standarizeFilePath(path)
	require.Error(t, err)
}
